---
title:  "[Time Series Analysis] #2. Simple Prophet Model: 주식데이터 적용"
categories:
  - application
tags:
  - timeseries
  - stocks
toc: true
use_math: true
sitemap: 
---

내 깃허브 블로그 [첫 포스팅]은 주식데이터의 탐색에 관한 내용이었다. 오늘은 첫 포스팅에서 썼던 미래에셋 주식 데이터 중 '삼성전자'의 주가를 Prophet 이라는 시계열분석 모델을 이용해
fit 하고 prediction도 해보는 포스팅을 해볼까 한다. 

<br>

## Preview
### Prophet 모델이란?
**Prophet**은 페이스북에서 개발한 시계열 예측 모델이다. 지금까지 시계열분석 관련 공부 포스팅을 해오면서 시계열 데이터 예측에 쓰이는 다양한 모델과 기법들에 대해 공부했는데, 이 모델들과
비교했을 때 Prophet이 가지는 장점은 이렇다.
 1) ARIMA/ARMA와 같이 정상성 여부를 확인하지 않아도 된다. 즉, 비정상성 시계열이어도 별다른 변환을 하지 않아도 된다.
 2) Holiday(연휴,휴일)을 추가하여 holiday에 따라 달라지는 데이터의 값을 반영할 수 있다.
 3) 파라미터들이 직관적이고, 한 번 보고 이해하고 구현하기 쉽다. <br>
 
(이외 Prophet에 대한 자세한 설명은 <https://facebook.github.io/prophet/> 를 참고하자)
이러한 장점들로 인해 시계열 예측을 할 때 Prophet 모델을 점점 많이 사용하고 있는 추세이다! 

### 사용 데이터
Prophet 모델에 사용한 데이터는 2020 미래에셋 금융빅데이터 페스티벌에서 제공한 `stocks.csv` 중 **삼성전자**에 해당하는 데이터를 사용했다. 삼성전자 주식 데이터의 트렌드 그래프는
[첫 포스팅]에 들어가면 볼 수 있다! <br>
삼성전자 주가 데이터는 2019년 7월 1일부터 2020년 7월 28일까지의 주가를 포함하고 있다. 그리고 주식 거래가 이루어지지 않는 주말과 공휴일의 날짜는 포함되지 않는다.

## Prophet Modeling with steps
이제 본격적으로 Prophet 모델링을 해보자! 모델링 전, 데이터를 정제해야하는데 Prophet 모델의 input 데이터는 'ds' 라는 날짜 값을 가지는 변수, 'y'라는 예측해야 하는 변수를 포함해야 한다.
즉, 본 데이터에서는 'ds'는 2019.7.1 ~ 2020.7.28 를, 'y'는 보통 주가의 기준이 되는 '종목종가'가 된다. 이제부터 이 데이터셋을 df라고 칭한다.

### Model 1: basic Prophet model
Model 1은 아무런 파라미터 처리를 하지 않은 기본값으로 세팅된 Prophet 모델이다. 코드로는 다음과 같이 구현하면 된다.
```python
model1 = Prophet() # baisc prophet model
model1.fit(df)
forecast = model1.predict(df) 
```
Model 1을 이용해 df 데이터를 fit 한 결과는 아래와 같다. Model 1을 쓰면 대략적인 주가 데이터의 추세는 반영하지만, 급격히 감소하거나 증가하는 구간의 값들을 잘 반영하지 못한다.
![model1](/assets/model1.png)

### Model 2: Trend change points 조정
Model 1은 전반적인 트렌드는 반영하지만, 세부적인 데이터의 트렌드(증감 부분 등등)을 잡아내지 못하는 경향이 있다. Prophet 모델에서는 **trend change points** 라는 것을 조정함으로써
트렌드를 좀 더 세부적으로 반영할 수 있다. Change point라는 것은 데이터의 트렌드가 변하는 지점을 말한다(예를 들면 상승->하락 지점). 기본적인 파라미터는 다음과 같다.
 + `changepoint_range`: 앞에서부터 몇 %의 데이터에서 change point를 지정할지를 선택하는 파라미터다. 예를 들어, 0.8이면 앞에서부터 80% 만큼의 데이터에서 change point를 잡는다. 이 파라미터를 너무 높게 잡으면 기존 데이터의 트렌드를 과하게 반영해 future 데이터를 예측할 때 overfitting이 발생할 수 있다.
 + `chagepoint_prior_scale`: change point의 유연성을 결정하는 파라미터이다. 이 파라미터의 값을 늘릴수록 유연성이 높아지는데, 유연성이 높아진다는 것은 데이터의 트렌드를 더 유연하게 
 잡아낸다는 뜻이다. 너무 작은 값이면 underfitting의 위험이 있지만, 너무 크게 잡으면 overfitting 위험이 있다.
<br>
Model 1의 changepoint_range은 기본값인 0.8, 그리고 chagepoint_prior_scale 은 0.05로 설정되어있다. 하지만 Model 1은 데이터에 underfit 하는 경향을 보이므로 changepoint_prior_scale을
0.2로 높였다. `add_changepoint_to_plot`을 이용하면 잡아낸 change point를 반영한 그래프를 보여준다.
![model1](/assets/changepoint.png)
<br>
완성된 Model 2의 모형의 코드는 이렇다!
```python
model2 = Prophet(changepoint_range=0.8, changepoint_prior_scale= 0.2)
```
Model 2를 이용해 fit한 결과는 아래와 같다. Model 1에 비해 세부적인 추세는 잘 반영하나, 아직도 몇몇 구간에서는 트렌드를 반영하지 못한다.
![model2](/assets/model2.png)

<br>
[첫 포스팅]: https://hyewonleess.github.io/application/stocks-explore/
