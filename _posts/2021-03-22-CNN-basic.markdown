---
title:  "[CNN] #1. CNN의 기본 및 간단한 구현하기"
categories:
  - deeplearning
tags:
  - CNN
  - deeplearning
  - DL
  - image
toc: true
use_math: true
sitemap: 
---

이제부터 약 한 학기(6개월정도?) 동안은 딥러닝 관련 포스팅을 주로 해보려고 한다. 이번 학기에 딥러닝 강의를 듣기도 하고, 스스로 더 찾아보고 공부해보고 기록을 남기고 싶어서 시작하게된 딥러닝 포스팅! 첫번째 주제는 이미지 분류에 주로 이용되는 <mark style='background-color: #fff5b1'>CNN(Convolutional Neural Network) </mark>이다.


이번 포스팅은 CNN 포스팅의 첫 주자이기 때문에, CNN의 기본 이론을 간략히 리뷰하고 tensorflow를 이용해 simple한 모델을 구현해보는 것에 대해 다룰 것이다.


# BASICS OF CNN

## 1. CNN 기초 이론 리뷰
cf) 본 포스팅에서는 CNN의 구조는 정말 간단하게 요약하고 코드 중심으로 다룰 예정입니다
### (1) CNN의 구조
CNN은 크게 Convolutional layer, Pooling layer, Fully connected layer로 구성되어 있다. 기본적인 구조는 아래 그림과 같다. <br>

이미지 데이터를 입력하면 우선 Conv layer에서 필터 연산을 거치게 되고 활성화함수를 통과한 후, Pooling layer에서 pooling된다. 그리고 이 구조가 여러번 반복된다. Output으로 내보내기 전,
Fully connected layer에서 이전까지 처리된 이미지 데이터가 1D array로 변형된다. 그 후 Softmax 계층을 통과하면서 각 class로 분류된다. 이제 하나씩 살펴보자!
![img](/assets/cnn.PNG)

**1. Convolutional layer** <br>
합성곱계층 Convolutional layer(줄여서 Conv layer)는 입력된 이미지의 특징(화소, 구성)을 반영하여 새로 처리된 이미지를 생성하는 계층이다. 합성곱계층에서는 이미지에 대해 **필터연산**을 수행하게 되는데 필터의 개수, 크기에 따라 이미지 연산이 달라지기도 한다.

**2. Pooling layer** <br>
풀링 계층은 합성곱 계층을 통과한 이미지의 대표적인 픽셀만 뽑는 역할을 한다. 대표적인 pooling 방법에는 max pooling, global mean pooling이 있는데 일반적으로 CNN에서는 max pooling을 많이 사용한다. (Max pooling은 n x n 픽셀에서 가장 큰 값만 추출한다.)
이 단계를 거치면 이미지 데이터의 크기가 줄어 CNN에서 계산량을 줄일 수 있고, complexity 또한 줄일 수 있다.

**3. Fully connected layer** <br>
완전연결계층에서는 앞에서 모든 처리를 거친 이미지 데이터를 1D array로 변환하여(flatten) softmax 함수를 적용할 수 있게끔 변환한다. 


### (2) 기본 처리
 + filter size: 합성곱 계층에서 가장 핵심적인 필터의 크기를 나타내는 것으로, 필터 사이즈에 따라 output image의 사이즈가 달라진다.
 + fiter 개수: 필터 개수는 output image의 채널 수를 결정한다.
 + padding: 기존 이미지 주변을 특정 값(보통 0)으로 채우는 과정으로, 합성곱 계층을 통과해도 이미지의 사이즈가 감소하는 것을 방지하기 위해 사용한다.
 + stride: 합성곱 계층에서 필터가 이동할 때, 처리 후 몇칸을 이동할지를 결정하는 것으로 이 역시 output image의 사이즈를 결정한다.


## 2. Simple CNN 구현 코드
이제 CNN을 tensorflow를 이용해서 구현하는 방법에 대해서 알아보겠다. 사용한 데이터는 아주 유명한 데이터인 MNIST 손글씨 데이터이다.

### (1) Load MNIST data and preview
`tensorflow.keras` 에서 `datasets`를 이용하면 MNIST 데이터셋을 불러올 수 있다. 데이터 구성은 다음과 같다.
 + train images: 이미지 데이터 600000개, 이미지 크기 28 x 28
 + test images: 이미지 데이터 100000개, 이미지 크기 28 x 28
 + class 수: 10개(0~9)

```python
# MNIST 데이터 로드
(train_img, train_labels), (test_img, test_labels) = datasets.mnist.load_data()
```

만약 이미지 데이터 중 일부를 미리 보고 싶다면 `matplotlib`의 `imshow`를 이용하면 된다.
```python
# imshow를 이용해 MNIST 이미지 세개 미리보기
fig, ax = plt.subplots(nrows = 1, ncols = 3)
for i in range(3):
  ax[i].imshow(train_img[i])

plt.tight_layout()
plt.show()
```
그러면 다음과 같이 이미지를 미리보기 할 수 있다.
<br>
![img](/assets/imshow.png)


### (2) CNN Model
이제 본격적으로 tensorflow를 이용하여 CNN 모델을 구축해보자. 주피터 노트북 또는 colab에서 tensorflow를 사용하기 위해서는 우선 `pip install tensorflow`를 이용해 설치를 해야한다.
로드해야할 함수는 다음과 같다.

```python
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from keras.utils.np_utils import to_categorical

# CNN 모델 위한 필수적인 layer
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
```






